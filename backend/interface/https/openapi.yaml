openapi: 3.0.0
info:
  title: Wine Century Backend Code
  description: backend code for the wine century website
  version: 1.0.0

servers:
  - url: http://localhost:8080
    description: Local development server

paths:
  /admin/login:
    post:
      summary: Login as an admin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminLoginRequest'
      responses:
        '200':
          description: Session token for admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminLoginResponse'
        '401':
          description: Admin not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Admin not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/register:
    post:
      summary: Register an admin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminSignupRequest'
      responses:
        '201':
          description: Session token for admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminSignupResponse'
        '401':
          description: Admin not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Admin already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/products:
    get:
      summary: List products
      parameters:
        - in: query
          name: categoryID
          required: true
          schema:
            type: integer
            minimum: 1
        - in: query
          name: limit
          required: true
          schema:
            type: integer
            minimum: 1
          description: Limit of products to get
        - in: query
          name: offset
          required: true
          schema:
            type: integer
            minimum: 0
          description: Offset of products to get
      responses:
        '200':
          description: Products
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductListResponse'
        '401':
          description: Admin not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create a product
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreateRequest'
      responses:
        '201':
          description: Product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCreateResponse'
        '401':
          description: Admin not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Product already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/products/{productID}:
    get:
      summary: List products
      parameters:
        - in: path
          name: productID
          schema:
            type: integer
          required: true
          description: Numeric ID of the product to update
      responses:
        '200':
          description: Products
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductGetResponse'
        '401':
          description: Admin not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update product
      parameters:
        - in: path
          name: productID
          schema:
            type: integer
          required: true
          description: Numeric ID of the product to update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductEditRequest'
      responses:
        '200':
          description: Edited successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductEditResponse'
        '401':
          description: Admin not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete product
      parameters:
        - in: path
          name: productID
          schema:
            type: integer
          required: true
          description: Numeric ID of the product to delete
      responses:
        '204':
          description: Deleted successfully
        '401':
          description: Admin not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/products/categories:
    get:
      summary: List product categories
      responses:
        '200':
          description: Product Categories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategoryListResponse'
        '401':
          description: Admin not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create a product categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCategoryCreateRequest'
      responses:
        '201':
          description: Product category created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategoryCreateResponse'
        '401':
          description: Admin not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Product category already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/products/categories/{productCategoryID}:
    get:
      summary: Get product category
      parameters:
        - in: path
          name: productCategoryID
          schema:
            type: integer
          required: true
          description: Numeric ID of the product category
      responses:
        '200':
          description: Product Category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategoryGetResponse'
        '401':
          description: Admin not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update product category
      parameters:
        - in: path
          name: productCategoryID
          schema:
            type: integer
          required: true
          description: Numeric ID of the product category to update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCategoryEditRequest'
      responses:
        '200':
          description: Edited successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategoryEditResponse'
        '401':
          description: Admin not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete product category
      parameters:
        - in: path
          name: productCategoryID
          schema:
            type: integer
          required: true
          description: Numeric ID of the product category to delete
      responses:
        '204':
          description: Deleted successfully
        '401':
          description: Admin not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/users:
    get:
      summary: List users
      parameters:
        - in: query
          name: limit
          required: true
          schema:
            type: integer
            minimum: 1
          description: Limit of users to get
        - in: query
          name: offset
          required: true
          schema:
            type: integer
            minimum: 0
          description: Offset of users to get
      responses:
        '200':
          description: Users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
        '401':
          description: Admin not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/users/{userID}:
    put:
      summary: Update user
      parameters:
        - in: path
          name: userID
          schema:
            type: integer
          required: true
          description: Numeric ID of the user to update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserEditRequest'
      responses:
        '200':
          description: Edited successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEditResponse'
        '401':
          description: Admin not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete user
      parameters:
        - in: path
          name: userID
          schema:
            type: integer
          required: true
          description: Numeric ID of the user to delete
      responses:
        '204':
          description: Deleted successfully
        '401':
          description: Admin not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /public/products/categories:
    get:
      summary: List product categories
      responses:
        '200':
          description: Product Categories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategoryListResponse'
        '401':
          description: Admin not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    AdminLoginRequest:
      type: object
      properties:
        email:
          type: string
          description: Admin email
        password:
          type: string
          description: Admin password
      required:
        - email
        - password

    AdminLoginResponse:
      type: object
      properties:
        token:
          type: string
          description: Bearer Token for API Use

    AdminSignupRequest:
      type: object
      properties:
        firstName:
          type: string
          description: Admin first name
        lastName:
          type: string
          description: Admin last name
        email:
          type: string
          description: Admin email
        password:
          type: string
          description: Admin password
      required:
        - firstName
        - lastName
        - email
        - password

    AdminSignupResponse:
      type: object
      properties:
        id:
          type: integer
          description: Admin id
        firstName:
          type: string
          description: Admin first name
        lastName:
          type: string
          description: Admin last name
        email:
          type: string
          description: Admin email
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
        - id
        - firstName
        - lastName
        - email
        - createdAt
        - updatedAt

    ProductCreateRequest:
      type: object
      properties:
        name:
          type: string
          description: Product name
        details:
          type: string
          description: Product details
        price:
          type: number
          description: Product price
        categoryID:
          type: number
          description: Category ID
      required:
        - name
        - details
        - price
        - categoryID

    ProductCreateResponse:
      type: object
      properties:
        id:
          type: integer
          description: Product id
        name:
          type: string
          description: Product name
        details:
          type: string
          description: Product details
        price:
          type: number
          description: Product price
        categoryID:
          type: number
          description: Category ID
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
        - id
        - name
        - details
        - price
        - categoryID
        - createdAt
        - updatedAt

    ProductEditRequest:
      type: object
      properties:
        details:
          type: string
          description: Product details
        price:
          type: number
          description: Product price
      required:
        - details
        - price

    ProductEditResponse:
      type: object
      properties:
        id:
          type: integer
          description: Product id
        name:
          type: string
          description: Product name
        details:
          type: string
          description: Product details
        price:
          type: number
          description: Product price
        categoryID:
          type: number
          description: Category ID
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
        - id
        - name
        - details
        - price
        - categoryID
        - createdAt
        - updatedAt

    ProductGetResponse:
      type: object
      properties:
        id:
          type: integer
          description: Product id
        name:
          type: string
          description: Product name
        details:
          type: string
          description: Product details
        price:
          type: number
          description: Product price
        categoryID:
          type: number
          description: Category ID
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
        - id
        - name
        - details
        - price
        - categoryID
        - createdAt
        - updatedAt

    ProductListResponse:
      type: object
      properties:
        products:
          type: array
        hasMore:
          type: boolean
      required:
        - products
        - hasMore

    ProductCategoryCreateRequest:
      type: object
      properties:
        name:
          type: string
          description: Product category name
      required:
        - name

    ProductCategoryCreateResponse:
      type: object
      properties:
        id:
          type: integer
          description: Product category id
        name:
          type: string
          description: Product category name
        createdAt:
          type: string
      required:
        - id
        - name
        - createdAt

    ProductCategoryEditRequest:
      type: object
      properties:
        name:
          type: string
          description: Product category name
      required:
        - name

    ProductCategoryEditResponse:
      type: object
      properties:
        id:
          type: integer
          description: Product id
        name:
          type: string
          description: Product name
        createdAt:
          type: string
      required:
        - id
        - name
        - createdAt

    ProductCategoryGetResponse:
      type: object
      properties:
        id:
          type: integer
          description: Product id
        name:
          type: string
          description: Product name
        createdAt:
          type: string
      required:
        - id
        - name
        - createdAt

    ProductCategoryListResponse:
      type: object
      properties:
        productCategories:
          type: array
        hasMore:
          type: boolean
      required:
        - productCategories
        - hasMore

    UserEditRequest:
      type: object
      properties:
        firstName:
          type: string
          description: Admin first name
        lastName:
          type: string
          description: Admin last name
        email:
          type: string
          description: Admin email
      required:
        - firstName
        - lastName
        - email

    UserEditResponse:
      type: object
      properties:
        id:
          type: integer
          description: Admin id
        firstName:
          type: string
          description: Admin first name
        lastName:
          type: string
          description: Admin last name
        email:
          type: string
          description: Admin email
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
        - id
        - firstName
        - lastName
        - email
        - createdAt
        - updatedAt

    UserListResponse:
      type: object
      properties:
        users:
          type: array
        hasMore:
          type: boolean
      required:
        - users
        - hasMore

    ErrorResponse:
      type: object
      properties:
        errorCode:
          type: string
        errorMessage:
          type: string
